{"version":3,"sources":["components/StartPage.js","components/Registration.js","components/Profile.js","components/HamburgerMenu.js","components/WorkoutBank.js","components/App.js","serviceWorker.js","index.js"],"names":["StartPage","react_default","a","createElement","className","id","type","placeholder","Registration","href","class","Profile","HamburgerMenu","WorkoutBank","App","components_HamburgerMenu","BrowserRouter","Switch","Route","path","component","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAwBeA,QArBG,WAEd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,iBACNJ,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOD,GAAG,WAAWE,YAAY,oBAC7CN,EAAAC,EAAAC,cAAA,SAAQG,KAAK,WAAWD,GAAG,WAAWE,YAAY,gBAClDN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,GAAG,SAA9B,eCMKG,EAjBM,WAEjB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,iBACPJ,EAAAC,EAAAC,cAAA,KAAGM,KAAK,KAAIR,EAAAC,EAAAC,cAAA,OAAKO,MAAM,QAAOT,EAAAC,EAAAC,cAAA,uBAC9BF,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BCSXO,EAjBC,WAEZ,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,iBACPJ,EAAAC,EAAAC,cAAA,KAAGM,KAAK,KAAIR,EAAAC,EAAAC,cAAA,OAAKO,MAAM,QAAOT,EAAAC,EAAAC,cAAA,uBAC9BF,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBCSXQ,EAjBO,WAElB,OACEX,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YAAYD,UAAU,WACxBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,iBAAgBR,EAAAC,EAAAC,cAAA,0BACxBF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,YAAWR,EAAAC,EAAAC,cAAA,oBACnBF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,gBAAeR,EAAAC,EAAAC,cAAA,gCCS5BU,EAjBK,WAEhB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,yBACPJ,EAAAC,EAAAC,cAAA,KAAGM,KAAK,KAAIR,EAAAC,EAAAC,cAAA,OAAKO,MAAM,QAAOT,EAAAC,EAAAC,cAAA,uBAC9BF,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iDCqBXU,mLApBX,OACCb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAD,MACCd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACAf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWpB,EAAWqB,OAAK,IAC3CpB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWZ,IACvCP,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWT,IAClCV,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWP,eAZhCS,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0aa76ef2.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst StartPage = () => {\n\n    return (\n      <div className=\"App\">\n      <div id=\"headerWrapper\">\n        <h1>WOFFOUT</h1>\n      </div>\n        <header className=\"App-header\">\n          <div className=\"inputWrapper\">\n          <input type=\"text\" id=\"username\" placeholder=\"Användarnamn\"></input>\n          <input  type=\"password\" id=\"password\" placeholder=\"Lösenord\"></input>\n          <button className=\"button\" id=\"login\">Log in</button>\n          </div>\n        </header>\n      </div>\n\n    );\n\n}\n\n\nexport default StartPage;\n","import React from 'react';\nimport '../App.css';\n\nconst Registration = () => {\n\n    return (\n      <div className=\"App\">\n      \t<div id=\"headerWrapper\">\n      \t\t<a href=\"/\"><div class=\"logo\"><h1>WOFFOUT</h1></div></a>\n      \t\t<h2>REGISTRERING</h2>\n      \t</div>\n        <header className=\"App-header-registration\">\n          \n        </header>\n      </div>\n    );\n\n}\n\n\nexport default Registration;\n\n","import React from 'react';\nimport '../App.css';\n\nconst Profile = () => {\n\n    return (\n      <div className=\"App\">\n      \t<div id=\"headerWrapper\">\n      \t\t<a href=\"/\"><div class=\"logo\"><h1>WOFFOUT</h1></div></a>\n      \t\t<h2>PROFIL</h2>\n      \t</div>\n        <header className=\"App-header\">\n         \n        </header>\n      </div>\n    );\n\n}\n\n\nexport default Profile;\n","import React from 'react';\nimport '../App.css';\n\nconst HamburgerMenu = () => {\n\n    return (\n      <div id=\"hamburger\" className=\"overlay\">          \n            <div className=\"overlayContent\">\n                <ul>\n                    <a href=\"/Registration\"><p>REGISTRERING</p></a>\n                    <a href=\"/Profile\"><p>PROFIL</p></a>\n                    <a href=\"/WorkoutBank\"><p>ÖVNINGSBANK</p></a>\n                </ul>               \n            </div>                \n      </div>\n    );\n\n}\n\n\nexport default HamburgerMenu;\n\n","import React from 'react';\nimport '../App.css';\n\nconst WorkoutBank = () => {\n\n    return (\n      <div className=\"App\">\n      \t<div id=\"headerWrapper-workout\">\n      \t\t<a href=\"/\"><div class=\"logo\"><h1>WOFFOUT</h1></div></a>\n      \t\t<h2>ÖVNINGSBANK</h2>\n      \t</div>\n        <header className=\"App-header-workout\">\n         \n        </header>\n      </div>\n    );\n\n}\n\n\nexport default WorkoutBank;","import React, { Component } from 'react';\nimport '../App.css';\nimport StartPage from './StartPage';\nimport Registration from './Registration';\nimport Profile from './Profile';\nimport HamburgerMenu from './HamburgerMenu'\nimport WorkoutBank from './WorkoutBank';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  \n  render() {\n    return (\n     <div>\n     <HamburgerMenu/>\n      <BrowserRouter>\n      <div>\n          <Switch>\n            <Route path=\"/\" component={StartPage} exact/>\n            <Route path=\"/Registration\" component={Registration} />\n            <Route path=\"/Profile\" component={Profile} />\n            <Route path=\"/WorkoutBank\" component={WorkoutBank} />\n\n\n          </Switch>\n      </div>\n       </BrowserRouter> \n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}